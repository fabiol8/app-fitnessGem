rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasValidEmail(email) {
      return email is string &&
        email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isTimestamp(value) {
      return value is timestamp;
    }

    function validateUserData(data) {
      return data.keys().hasAll(['email', 'name']) &&
        hasValidEmail(data.email) &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        (!('fitnessProfile' in data) || validateFitnessProfile(data.fitnessProfile)) &&
        (!('preferences' in data) || data.preferences is map) &&
        (!('trainingPreferences' in data) || data.trainingPreferences is map) &&
        (!('generatedPlans' in data) || data.generatedPlans is map);
    }

    function validateProgressData(data) {
      return data.keys().hasAll(['date', 'workouts']) &&
        data.date is timestamp &&
        data.workouts is list && data.workouts.size() <= 50;
    }

    function validateStateData(data) {
      return data is map && data.size() <= 10 &&
        (!('createdAt' in data) || data.createdAt is timestamp) &&
        (!('updatedAt' in data) || data.updatedAt is timestamp);
    }

    function passesRateLimit() {
      return resource == null || (
        (('updatedAt' in resource.data)
          ? request.time > resource.data.updatedAt + duration.value(1, 's')
          : (('lastUpdated' in resource.data)
            ? request.time > resource.data.lastUpdated + duration.value(1, 's')
            : true)
        )
      );
    }

    match /users/{userId} {
      allow read: if isOwner(userId);

      allow create: if isOwner(userId) &&
        validateUserData(request.resource.data) &&
        (!('createdAt' in request.resource.data) || isTimestamp(request.resource.data.createdAt)) &&
        (!('updatedAt' in request.resource.data) || isTimestamp(request.resource.data.updatedAt));

      allow update: if isOwner(userId) &&
        validateUserData(request.resource.data) &&
        (!('updatedAt' in request.resource.data) || isTimestamp(request.resource.data.updatedAt)) &&
        (!('updatedAt' in resource.data) || request.resource.data.updatedAt >= resource.data.updatedAt) &&
        passesRateLimit() &&
        request.resource.data.email == resource.data.email;

      allow delete: if isOwner(userId);

      match /progress/{dateDoc} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) &&
          validateProgressData(request.resource.data) &&
          passesRateLimit();
        allow delete: if isOwner(userId);
      }

      match /state/{stateKey} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) &&
          validateStateData(request.resource.data) &&
          passesRateLimit();
        allow delete: if isOwner(userId);
      }

      match /nutrition/{docId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) &&
          validateNutritionData(request.resource.data) &&
          passesRateLimit();
        allow delete: if isOwner(userId);
      }

      match /workouts/{docId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) &&
          validateWorkoutData(request.resource.data) &&
          passesRateLimit();
        allow delete: if isOwner(userId);
      }
    }

    function validateFitnessProfile(profile) {
      return profile is map &&
        (!('goals' in profile) || (profile.goals is list && profile.goals.size() <= 10)) &&
        (!('preferences' in profile) || profile.preferences is map) &&
        (!('trainingEnvironment' in profile) || profile.trainingEnvironment is list) &&
        (!('nutrition' in profile) || profile.nutrition is map) &&
        (!('weeklyWorkouts' in profile) || (profile.weeklyWorkouts is number && profile.weeklyWorkouts >= 0 && profile.weeklyWorkouts <= 14)) &&
        (!('currentWeight' in profile) || (profile.currentWeight is number && profile.currentWeight > 0 && profile.currentWeight < 1000)) &&
        (!('targetWeight' in profile) || (profile.targetWeight is number && profile.targetWeight > 0 && profile.targetWeight < 1000)) &&
        (!('height' in profile) || (profile.height is number && profile.height > 0 && profile.height < 300));
    }

    function validateNutritionData(data) {
      return data.keys().hasAll(['date', 'meals']) &&
        data.date is timestamp &&
        data.meals is list && data.meals.size() <= 20 &&
        (!('calories' in data) || (data.calories is number && data.calories >= 0 && data.calories <= 10000));
    }

    function validateWorkoutData(data) {
      return data.keys().hasAll(['name', 'exercises']) &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        data.exercises is list && data.exercises.size() <= 50;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
